@use 'sass:math';

// espa√ßamento da colunas
$grid-columns:              12 !default;
$grid-gutter-width:         30px !default;
$break-point-default:       0;

@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left:  math.div($gutter, 2);
    padding-right: math.div($gutter, 2);
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;

    margin-left:  math.div($gutter, -2);
    margin-right: math.div($gutter, -2);
}

@mixin make-grid-column-offset($columns: $grid-columns, $breakpoint: $break-point-default) {
    @media (min-width: $breakpoint) {
        margin-left: math.percentage(math.div($columns, $grid-columns));
    }
}

@mixin make-grid-column-push($columns: $grid-columns, $breakpoint: $break-point-default) {
    @media (min-width: $breakpoint) {
        left: math.percentage(math.div($columns, $grid-columns));
    }
}

@mixin make-grid-column-pull($columns: $grid-columns, $breakpoint: $break-point-default) {
    @media (min-width: $breakpoint) {
        right: math.percentage(math.div($columns / $grid-columns));
    }
}

@mixin make-grid-column($columns: $grid-columns, $breakpoint: $break-point-default, $gutter: $grid-gutter-width) {
    @media (min-width: $breakpoint) {
        width: math.percentage(math.div($columns, $grid-columns));
        padding-left:  math.div($gutter, 2);
        padding-right: math.div($gutter, 2);
    }
}
	
.container {
    max-width: 1720px;
    @include container-fixed;
}

.container-fluid {
    @include container-fixed;
}

.row { @include make-row; }

[class^="col-"], [class*=" col-"] {
	width: 100%;
    min-height: 1px;
    padding-left:  math.div($grid-gutter-width, 2);
    padding-right: math.div($grid-gutter-width, 2);
	position: relative;
}

@for $i from 1 through 12 {
	.col-#{$i}{
        width: math.percentage(math.div($i, $grid-columns));
    }
}

/* ========== OFFSET ============ */
@for $i from 0 through 12 {
	.offset-#{$i}{
        margin-left: math.percentage(math.div($i, $grid-columns));
    }
}

/* ========== PUSH ============ */
@for $i from 0 through 12 {
	.push-#{$i}{
        left: math.percentage(math.div($i, $grid-columns));
    }
}

/* ========== PULL ============ */
@for $i from 0 through 12 {
	.pull-#{$i}{
        right: math.percentage(math.div($i, $grid-columns));
    }
}

@each $key, $value in $grid-breakpoints {
	@media( min-width: $value ) {

		@for $i from 1 through 12 {
			.#{$key}#{$breakpoint-separator}col-#{$i}{
		        width: math.percentage(math.div($i, $grid-columns));
		    }
	    }
		
		/* ========== OFFSET ============ */
	    @for $i from 0 through 12 {
			.#{$key}#{$breakpoint-separator}offset-#{$i}{
		        margin-left: math.percentage(math.div($i, $grid-columns));
		    }
	    }
		
		/* ========== PUSH ============ */
	    @for $i from 0 through 12 {
			.#{$key}#{$breakpoint-separator}push-#{$i}{
		        left: math.percentage(math.div($i, $grid-columns));
		    }
	    }
		
		/* ========== PULL ============ */
	    @for $i from 0 through 12 {
			.#{$key}#{$breakpoint-separator}pull-#{$i}{
		        right: math.percentage(math.div($i, $grid-columns));
		    }
	    }
	}
}